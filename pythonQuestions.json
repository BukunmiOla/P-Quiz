[
    {
      "id": "1",  
      "category" : "Variable Names",
        "instruction" : "Is Python case sensitive when dealing with identifiers?" ,
        "expression" : "" ,
        "correct": "yes",
        "incorrect" : [
           "no",
           "machine dependent",
           "none of the mentioned"
        ],
        
        "Explanation" : "Case is always significant."
        
    },

    {
      "id": "2",  
      "category" : "Variable Names",
        "instruction" : " What is the maximum possible length of an identifier?" ,
        "expression" : "" ,
        "correct": "none of the mentioned",
        "incorrect" : [
           " 31 characters",
           " 63 characters",
           "79 characters"
        ],
       "Explanation" : " Identifiers can be of any length."
        
    },

    {
      "id": "3",  
      "category" : "Variable Names",
        "instruction" : "Which of the following is invalid?" ,
        "expression" : "" ,
        "correct": "none of the mentioned",
        "incorrect" : [
           "_a = 1",
           " __a = 1",
           " __str__ = 1"
        ],
       "Explanation" : "All the statements will execute successfully but at the cost of reduced readability."
          },

    {
      "id": "4",  
      "category" : "Variable Names",
        "instruction" : " Which of the following is an invalid variable?" ,
        "expression" : "" ,
        "correct": "1st_string",
        "incorrect" : [
           " my_string_1",
           "foo",
           " _"
        ],
       "Explanation" : " Variable names should not start with a number."
        
    },

    {
      "id": "5",  
      "category" : "Variable Names",
        "instruction" : "Why are local variable names beginning with an underscore discouraged?" ,
        "expression" : "" ,
        "correct": "they are used to indicate a private variables of a class",
        "incorrect" : [
           " they confuse the interpreter",
           " they are used to indicate global variables",
           " they slow down execution"
        ],
       "Explanation" : " As Python has no concept of private variables, leading underscores are used to indicate variables that must not be accessed from outside the class."
        
    },

    {
      "id": "6",  
      "category" : "Variable Names",
        "instruction" : " Which of the following is not a keyword?" ,
        "expression" : "" ,
        "correct": "eval",
        "incorrect" : [
           " assert",
           "nonlocal",
           "pass"
        ],
       "Explanation" : "eval can be used as a variable."
        
    },

    {
      "id": "7",  
      "category" : "Variable Names",
        "instruction" : "All keywords in Python are in _________" ,
        "expression" : "" ,
        "correct": " None of the mentioned",
        "incorrect" : [
           " lower case",
           " UPPER CASE",
           "Capitalized"
        ],
       "Explanation" : "True, False and None are capitalized while the others are in lower case."
        
    },

    {
      "id": "8",  
      "category" : "Variable Names",
        "instruction" : " Which of the following is true for variable names in Python?" ,
        "expression" : "" ,
        "correct": " unlimited length",
        "incorrect" : [
           " all private members must have leading and trailing underscores",
           "underscore and ampersand are the only two special characters allowed",
           " none of the mentioned"
        ],
       "Explanation" : " Variable names can be of any length."
        
    },

    {
      "id": "9",  
      "category" : "Variable Names",
        "instruction" : "Which of the following is an invalid statement?" ,
        "expression" : "" ,
        "correct": "a b c = 1000 2000 3000",
        "incorrect" : [
           " abc = 1,000,000",
           "a,b,c = 1000, 2000, 3000",
           " a_b_c = 1,000,000"
        ],
       "Explanation" : "Spaces are not allowed in variable names."
        
    },

    {
      "id": "10",  
      "category" : "Variable Names",
        "instruction" : " Which of the following cannot be a variable?" ,
        "expression" : "" ,
        "correct": " in",
        "incorrect" : [
           "__init__",
           "it",
           "on"
        ],
       "Explanation" : "in is a keyword."
        
    },

    {
      "id": "11",  
      "category" : " Basic Operators",
        "instruction" : "Which is the correct operator for power(xy)?" ,
        "expression" : "" ,
        "correct": " X**y",
        "incorrect" : [
           " X^y",
           " X^^y",
           " None of the mentioned"
        ],
       "Explanation" : " In python, power operator is x**y i.e. 2**3=8."
        
    },

    {
        "id": "12",  
        "category" : " Basic Operators",
        "instruction" : "Which one of these is floor division?" ,
        "expression" : "" ,
        "correct": " //",
        "incorrect" : [
           "/",
           " %",
           "None of the mentioned"
           
        ],
       "Explanation" : "When both of the operands are integer then python chops out the fraction part and gives you the round off value, to get the accurate answer use floor division. This is floor division. For ex, 5/2 = 2.5 but both of the operands are integer so answer of this expression in python is 2. To get the 2.5 answer, use floor division."
        
    },

    {   "id":"13",
        "category" : " Basic Operators",
        "instruction" : "What is the order of precedence in python?" ,
        "expression" : "i)Parentheses   ii) Exponential  iii) Multiplication   iv) Division  v) Addition  vi) Subtraction" ,
        "correct": "i,ii,iii,iv,v,vi",
        "incorrect" : [
           "ii,i,iii,iv,v,vi",
           " ii,i,iv,iii,v,vi",
           "i,ii,iii,iv,vi,v"
           
        ],
       "Explanation" : "For order of precedence, just remember this PEMDAS (similar to BODMAS)."
        
    },

    {
      "id":"14",
      "category" : " Basic Operators",
      "instruction" : "What is the answer to this expression, 22 % 3 is?" ,
        "expression" : "" ,
        "correct": " 1",
        "incorrect" : [
           " 7",
           " 0",
           " 5"
           
        ],
       "Explanation" : " Modulus operator gives the remainder. So, 22%3 gives the remainder, that is, 1."
        
    },

    {
      "id":"15",
      "category" : " Basic Operators",
       "instruction" : "Mathematical operations can be performed on a string." ,
        "expression" : "" ,
        "correct": " False",
        "incorrect" : [
           " True",
           "",
           "",
           ""
        ],
       "Explanation" : " You can’t perform mathematical operation on string even if the string is in the form: ‘1234…’."
        
    },

    {
      "id":"16",
      "category" : " Basic Operators",
      "instruction" : "Operators with the same precedence are evaluated in which manner?" ,
        "expression" : "" ,
        "correct": "Left to Right",
        "incorrect" : [
           "Right to Left",
           "Can’t say",
           "None of the mentioned"
           
        ],
       "Explanation" : "None."
        
    },

    {
      "id":"17",
      "category" : " Basic Operators",
      "instruction" : "What is the output of this expression, 3*1**3?" ,
        "expression" : "" ,
        "correct": "3",
        "incorrect" : [
           "27",
           "9",
           " 1"
           
        ],
       "Explanation" : "First this expression will solve 1**3 because exponential has higher precedence than multiplication, so 1**3 = 1 and 3*1 = 3. Final answer is 3."
        
    },

    {
      "id":"18",
      "category" : " Basic Operators",
      "instruction" : "Which one of the following has the same precedence level?" ,
        "expression" : "" ,
        "correct": " Addition and Subtraction",
        "incorrect" : [
           "Multiplication, Division and Addition",
           "Multiplication, Division, Addition and Subtraction",
           " Addition and Multiplication",
           ""
        ],
       "Explanation" : "“Addition and Subtraction” are at the same precedence level. Similarly, “Multiplication and Division” are at the same precedence level. However, Multiplication and Division operators are at a higher precedence level than Addition and Subtraction operators."
        
    },

    {
      "id":"19",
      "category" : " Basic Operators",
      "instruction" : "he expression Int(x) implies that the variable x is converted to integer." ,
        "expression" : "" ,
        "correct": "True",
        "incorrect" : [
           " False"
           
        ],
       "Explanation" : "None."
        
    },

    {
      "id":"20",
      "category" : " Basic Operators",
      "instruction" : "Which one of the following has the highest precedence in the expression?" ,
        "expression" : "" ,
        "correct": "Parentheses",
        "incorrect" : [
           "Exponential",
           "Addition",
           "Multiplication"
           
        ],
       "Explanation" : "Just remember: PEMDAS, that is, Parenthesis, Exponentiation, Division, Multiplication, Addition, Subtraction. Note that the precedence order of Division and Multiplication is the same. Likewise, the order of Addition and Subtraction is also the same."
        
    },

    {
        "id":"21",
        "category" : " Core Data types",
        "instruction" : "Which of these in not a core data type?" ,
        "expression" : "" ,
        "correct": "Class",
        "incorrect" : [
           " Lists",
           "Dictionary",
           "Tuples"
        ],
       "Explanation" : "Class is a user defined data type."
        
    },

    {     "id":"22",
        "category" : " Core Data types",
        "instruction" : "Given a function that does not return any value, What value is thrown by default when executed in shell." ,
        "expression" : "" ,
        "correct": "None",
        "incorrect" : [
           "int",
           "bool",
           "void"
        ],
       "Explanation" : "Python shell throws a NoneType object back."
    },

    {     "id":"23",
        "category" : " Core Data types",
        "instruction" : "What will be the output of the following Python code?" ,
        "expression" : ">>>str=\"hello\" >>>str[:2]  >>>" ,
        "correct": " he",
        "incorrect" : [
           " lo",
           "olleh",
           "hello"
        ],
       "Explanation" : " We are printing only the 1st two bytes of string and hence the answer is “he”."
        
    },

    {   "id":"24",
        "category" : " Core Data types",
        "instruction" : " Which of the following will run without errors?" ,
        "expression" : "" ,
        "correct": "round(45.8)",
        "incorrect" : [
           " round(6352.898,2,5)",
           " round()",
           "round(7463.123,2,1)"
        ],
       "Explanation" : "Execute help(round) in the shell to get details of the parameters that are passed into the round function."
        
    },

    {   "id":"25",
        "category" : " Core Data types",
        "instruction" : "What is the return type of function id?" ,
        "expression" : "" ,
        "correct": "int",
        "incorrect" : [
           "float",
           "bool",
           "dict",
           ""
        ],
       "Explanation" : "Execute help(id) to find out details in python shell.id returns a integer value that is unique."
        
    },

    {     "id":"26",
        "category" : " Core Data types",
        "instruction" : "n python we do not specify types, it is directly interpreted by the compiler, so consider the following operation to be performed." ,
        "expression" : ">>>x = 13 ? 2 objective is to make sure x has a integer value, select all that apply (python 3.xx)" ,
        "correct": "All of the mentioned",
        "incorrect" : [
           " 13 // 2",
           " int(13 / 2)",
           " 13 % 2"
        ],
       "Explanation" : "// is integer operation in python 3.0 and int(..) is a type cast operator."
        
    },

    {     "id":"27",
        "category" : " Core Data types",
        "instruction" : " What error occurs when you execute the following Python code snippet?" ,
        "expression" : "apple = mango" ,
        "correct": "NameError",
        "incorrect" : [
           "SyntaxError",
           "ValueError",
           " TypeError"
        ],
       "Explanation" : "Mango is not defined hence name error."
        
    },
    {     "id":"28",
        "category" : " Core Data types",
        "instruction" : " What will be the output of the following Python code snippet?" ,
        "expression" : "def example(a):    a = a + '2'    a = a*2     return  >>>example(\"hello\")" ,
        "correct": "indentation Error",
        "incorrect" : [
           "cannot perform mathematical operation on strings",
           " hello2",
           " hello2hello2"
        ],
       "Explanation" : "Python codes have to be indented properly."
        
    },

    {     "id":"29",
        "category" : " Core Data types",
        "instruction" : " What data type is the object below?" ,
        "expression" : "L = [1, 23, 'hello', 1]" ,
        "correct": "list",
        "incorrect" : [
           "dictionary",
           "array",
           "tuple"
        ],
       "Explanation" : "List data type can store any values within it."
        
    },

    {     "id":"30",
        "category" : " Core Data types",
        "instruction" : " In order to store values in terms of key and value we use what core data type." ,
        "expression" : "" ,
        "correct": "dictionary",
        "incorrect" : [
           "list",
           " tuple",
           "class"
        ],
       "Explanation" : "Dictionary stores values in terms of keys and values."
        
    },

    {     "id":"31",
        "category" : " Numeric Types",
        "instruction" : "What is the output of print 0.1 + 0.2 == 0.3?" ,
        "expression" : "" ,
        "correct": "False",
        "incorrect" : [
           "True",
           "Machine dependent",
           " Error"
        ],
       "Explanation" : "Neither of 0.1, 0.2 and 0.3 can be represented accurately in binary. The round off errors from 0.1 and 0.2 accumulate and hence there is a difference of 5.5511e-17 between (0.1 + 0.2) and 0.3."
        
    },

    {     "id":"32",
        "category" : " Numeric Types",
        "instruction" : "Which of the following is not a complex number?" ,
        "expression" : "" ,
        "correct": "k = 2 + 3l",
        "incorrect" : [
           "k = 2 + 3J",
           "k = complex(2, 3)",
           " k = 2 + 3j"
        ],
       "Explanation" : "l (or L) stands for long."
        
    },

    {     "id":"33",
        "category" : " Numeric Types",
        "instruction" : "What is the type of inf?" ,
        "expression" : "" ,
        "correct": " Float",
        "incorrect" : [
           "Boolean",
           " Integer",
           " Complex"
        ],
       "Explanation" : "Infinity is a special case of floating point numbers. It can be obtained by float(‘inf’)."
        
    },

    {     "id":"34",
        "category" : " Numeric Types",
        "instruction" : "What does ~4 evaluate to?" ,
        "expression" : "" ,
        "correct": "-5",
        "incorrect" : [
           "-4",
           " -3",
           " +3"
        ],
       "Explanation" : " ~x is equivalent to -(x+1)."
        
    },

    {     "id":"35",
        "category" : " Numeric Types",
        "instruction" : "What does ~~~~~~5 evaluate to?" ,
        "expression" : "+5" ,
        "correct": "",
        "incorrect" : [
           "-11",
           "+11",
           "-5"
        ],
       "Explanation" : "~x is equivalent to -(x+1)."
        
    },

    {     "id":"36",
        "category" : " Numeric Types",
        "instruction" : "Which of the following is incorrect?" ,
        "expression" : "" ,
        "correct": " 03964",
        "incorrect" : [
           "0b101",
           " 0x4f5",
           "19023"
        ],
       "Explanation" : "Numbers starting with a 0 are octal numbers but 9 isn’t allowed in octal numbers."
        
    },

    {     "id":"37",
        "category" : " Numeric Types",
        "instruction" : "What is the result of cmp(3, 1)?" ,
        "expression" : "" ,
        "correct": " 1",
        "incorrect" : [
           "0",
           " True",
           "False"
        ],
       "Explanation" : "cmp(x, y) returns 1 if x > y, 0 if x == y and -1 if x < y."
        
    },

    {     "id":"38",
        "category" : " Numeric Types",
        "instruction" : "cmp(x, y) returns 1 if x > y, 0 if x == y and -1 if x < y." ,
        "expression" : "" ,
        "correct": " float(’12+34′)",
        "incorrect" : [
           "float(‘inf’) ",
           "float(‘nan’)",
           " float(’56’+’78’)",
           ""
        ],
       "Explanation" : " ‘+’ cannot be converted to a float."
        
    },

    {     "id":"39",
        "category" : " Numeric Types",
        "instruction" : "What is the result of round(0.5) – round(-0.5)?" ,
        "expression" : "" ,
        "correct": " Value depends on Python version",
        "incorrect" : [
           "1.0",
           "2.0",
           " 0.0"
        ],
       "Explanation" : "The behavior of the round() function is different in Python 2 and Python 3. In Python 2, it rounds off numbers away from 0 when the number to be rounded off is exactly halfway through. round(0.5) is 1 and round(-0.5) is -1 whereas in Python 3, it rounds off numbers towards nearest even number when the number to be rounded off is exactly halfway through. See the below output. \n  Here’s the runtime output for Python version 2.7 interpreter.6   \n  $ python \n \n  Python 2.7.17 (default, Nov  7 2019, 10:07:09) \n   >>> round(0.5) \n  1.0  \n>>> round(-0.5) \n -1.0 \n>>>   \nIn the above output, you can see that the round() functions on 0.5 and -0.5 are moving away from 0 and hence “round(0.5) – (round(-0.5)) = 1 – (-1) = 2”  \n\nHere’s the runtime output for Python version 3.6 interpreter. \n\n $ python3   \nPython 3.6.8 (default, Oct  7 2019, 12:59:55) \n >>> round(0.5) \n 0 \n >>> round(-0.5) \n 0 \n>>> round(2.5) \n 2 \n >>> round(3.5) \n 4 \n >>> \n In the above output, you can see that the round() functions on 0.5 and -0.5 are moving towards 0 and hence “round(0.5) – (round(-0.5)) = 0 – 0 = 0“. Also note that the round(2.5) is 2 (which is an even number) whereas round(3.5) is 4 (which is an even number)."
        
    },

    {     "id":"40",
        "category" : " Numeric Types", 
        "instruction" : "What does 3 ^ 4 evaluate to?" ,
        "expression" : "" ,
        "correct": " 7",
        "incorrect" : [
           "81",
           " 12",
           "0.75"
        ],
       "Explanation" : ": ^ is the Binary XOR operator."
        
    },

    {     "id":"41",
        "category" : " Precedence and Associativity – 1",
        "instruction" : "The value of the expressions 4/(3*(2-1)) and 4/3*(2-1) is the same." ,
        "expression" : "" ,
        "correct": "True",
        "incorrect" : [
           "False"
        ],
       "Explanation" : "Although the presence of parenthesis does affect the order of precedence, in the case shown above, it is not making a difference. The result of both of these expressions is 1.333333333. Hence the statement is true."
        
    },

    {
      "id":"42",
      "category" : " Precedence and Associativity – 1",
      "instruction" : "What will be the value of the following Python expression?" ,
        "expression" : "4 + 3 % 5" ,
        "correct": " 7",
        "incorrect" : [
           " 4",
           "2",
           " 0"
        ],
       "Explanation" : "The order of precedence is: %, +. Hence the expression above, on simplification results in 4 + 3 = 7. Hence the result is 7."
        
    },

    {
      "id":"43",
      "category" : " Precedence and Associativity – 1",
      "instruction" : " Evaluate the expression given below if A = 16 and B = 15." ,
        "expression" : "A % B // A" ,
        "correct": " 0",
        "incorrect" : [
           " 0.0",
           " 1.0",
           "1"
        ],
       "Explanation" : "The above expression is evaluated as: 16%15//16, which is equal to 1//16, which results in 0."
        
    },

    {
      "id":"44",
      "category" : " Precedence and Associativity – 1",
      "instruction" : "Which of the following operators has its associativity from right to left?" ,
        "expression" : "" ,
        "correct": "**",
        "incorrect" : [
           "+",
           "//",
           " %",
           ""
        ],
       "Explanation" : "All of the operators shown above have associativity from left to right, except exponentiation operator (**) which has its associativity from right to left."
        
    },

    {
      "id":"45",
      "category" : " Precedence and Associativity – 1",
      "instruction" : " What will be the value of x in the following Python expression?" ,
        "expression" : "x = int(43.55+2/2)" ,
        "correct": "44",
        "incorrect" : [
           "22",
           " 23",
           "43",
           ""
        ],
       "Explanation" : "The expression shown above is an example of explicit conversion. It is evaluated as int(43.55+1) = int(44.55) = 44. Hence the result of this expression is 44."
        
    },

    {
         "id":"46",    
         "category" : " Precedence and Associativity – 1",
         "instruction" : "What is the value of the following expression?" ,
        "expression" : "2+4.00, 2**4.0" ,
        "correct": "(6.0, 16.0)",
        "incorrect" : [
           "(6.00, 16.00)",
           " (6, 16)",
           " (6.00, 16.0)"

        ],
       "Explanation" : " The result of the expression shown above is (6.0, 16.0). This is because the result is automatically rounded off to one decimal place."
        
    },

    {
      "id":"47",
      "category" : " Precedence and Associativity – 1",
      "instruction" : "Which of the following is the truncation division operator?" ,
        "expression" : "" ,
        "correct": " //",
        "incorrect" : [
           " /",
           "%",
           " |"
        ],
       "Explanation" : "// is the operator for truncation division. It is called so because it returns only the integer part of the quotient, truncating the decimal part. For example: 20//3 = 6."
        
    },

    {
      "id":"48",
      "category" : " Precedence and Associativity – 1",
      "instruction" : "What are the values of the following Python expressions?" ,
        "expression" : " 2**(3**2) (2**3)**2  2**3**2" ,
        "correct": "512, 64, 512",
        "incorrect" : [
           " 64, 512, 64",
           "64, 64, 64",
           " 512, 512, 512"
        ],
       "Explanation" : "Expression 1 is evaluated as: 2**9, which is equal to 512. Expression 2 is evaluated as 8**2, which is equal to 64. The last expression is evaluated as 2**(3**2). This is because the associativity of ** operator is from right to left. Hence the result of the third expression is 512."
        
    },

    {
      "id":"49",
      "category" : " Precedence and Associativity – 1",
      "instruction" : "What is the value of the following expression" ,
        "expression" : "8/4/2, 8/(4/2)" ,
        "correct": "(1.0, 4.0)",
        "incorrect" : [
           " (1.0, 1.0)",
           " (4.0. 1.0)",
           "(4.0, 4.0)"
        ],
       "Explanation" : "The above expressions are evaluated as: 2/2, 8/2, which is equal to (1.0, 4.0)."
        
    },

    {
      "id":"50",
      "category" : " Precedence and Associativity – 1",
      "instruction" : "What is the value of the following expression?" ,
        "expression" : "float(22//3+3/3)" ,
        "correct": " 8.0",
        "incorrect" : [
           "8",
           "8.3",
           "8.33"
        ],
       "Explanation" : "The expression shown above is evaluated as: float( 7+1) = float(8) = 8.0. Hence the result of this expression is 8.0."
        
    },
    

    {
      "id":"51",
      "category" : "Precedence and Associativity – 2",
      "instruction" : "What will be the output of the following Python expression?" ,
        "expression" : "print(4.00/(2.0+2.0))" ,
        "correct": " 1.0",
        "incorrect" : [
           " Error",
           "1.00",
           "1.00"
        ],
       "Explanation" : "The result of the expression shown above is 1.0 because print rounds off digits."
        
    },

    {
      "id":"52",
      "category" : "Precedence and Associativity – 2",
      "instruction" : " What will be the value of X in the following Python expression?" ,
        "expression" : "X = 2+9*((3*12)-8)/10" ,
        "correct": "27.2",
        "incorrect" : [
           "30.0",
           " 30.8",
           " 28.4"
        ],
       "Explanation" : " The expression shown above is evaluated as: 2+9*(36-8)/10, which simplifies to give 2+9*(2.8), which is equal to 2+25.2 = 27.2. Hence the result of this expression is 27.2."
        
    },

    {
      "id":"53",
      "category" : "Precedence and Associativity – 2",
      "instruction" : " Which of the following expressions involves coercion when evaluated in Python?" ,
        "expression" : "" ,
        "correct": "1.7 % 2",
        "incorrect" : [
           "4.7 – 1.5",
           " 7.9 * 6.3",
           " 3.4 + 4.6"
        ],
       "Explanation" : " Coercion is the implicit (automatic) conversion of operands to a common type. Coercion is automatically performed on mixed-type expressions. The expression 1.7 % 2 is evaluated as 1.7 % 2.0 (that is, automatic conversion of int to float)."
        
    },

    {
      "id":"54",
      "category" : "Precedence and Associativity – 2",
      "instruction" : "What will be the output of the following Python expression?" ,
        "expression" : "24//6%3, 24//4//2" ,
        "correct": " (1,3)",
        "incorrect" : [
           " (0,3)",
           " (1,0)",
           " (3,1)"
        ],
       "Explanation" : "The expressions are evaluated as: 4%3 and 6//2 respectively. This results in the answer (1,3). This is because the associativity of both of the expressions shown above is left to right."
        
    },

    {
      "id":"55",
      "category" : "Precedence and Associativity – 2",
      "instruction" : "Which among the following list of operators has the highest precedence?" ,
        "expression" : "+, -, **, %, /, <<, >>, |" ,
        "correct": "**",
        "incorrect" : [
           " <<, >>",
           " |",
           " %"
        ],
       "Explanation" : "The highest precedence is that of the exponentiation operator, that is of **."
        
    },

    {
      "id":"56",
      "category" : "Precedence and Associativity – 2",
      "instruction" : " What will be the value of the following Python expression?" ,
        "expression" : "float(4+int(2.39)%2)" ,
        "correct": "4.0",
        "incorrect" : [
           "5.0",
           " 5",
           " 4"
        ],
       "Explanation" : "The above expression is an example of explicit conversion. It is evaluated as: float(4+int(2.39)%2) = float(4+2%2) = float(4+0) = 4.0. Hence the result of this expression is 4.0."
        
    },

    {
      "id":"57",
      "category" : "Precedence and Associativity – 2",
      "instruction" : "Which of the following expressions is an example of type conversion?" ,
        "expression" : "" ,
        "correct": " 4.0 + float(3)",
        "incorrect" : [
           "5.3 + 6.3",
           " 5.0 + 3",
           " 3 + 7"
        ],
       "Explanation" : "Type conversion is nothing but explicit conversion of operands to a specific type. Options 5.3 + 6.3 and 5.0 + 3 are examples of implicit conversion whereas option 4.0 + float(3) is an example of explicit conversion or type conversion."
        
    },

    {
      "id":"58",
      "category" : "Precedence and Associativity – 2",
      "instruction" : "Which of the following expressions results in an error?" ,
        "expression" : "" ,
        "correct": "int(’10.8’)",
        "incorrect" : [
           "float(‘10’)",
           " int(‘10’)",
           "float(’10.8’)"
        ],
       "Explanation" : "All of the above examples show explicit conversion. However the expression int(’10.8’) results in an error."
        
    },

    {
      "id":"59",
      "category" : "Precedence and Associativity – 2",
      "instruction" : " What will be the value of the following Python expression?" ,
        "expression" : "4+2**5//10" ,
        "correct": " 7",
        "incorrect" : [
           " 3",
           "77",
           " 0"
        ],
       "Explanation" : " The order of precedence is: **, //, +. The expression 4+2**5//10 is evaluated as 4+32//10, which is equal to 4+3 = 7. Hence the result of the expression shown above is 7."
        
    },

    {
      "id":"60",
      "category" : "Precedence and Associativity – 2",
      "instruction" : "The expression 2**2**3 is evaluates as: (2**2)**3." ,
        "expression" : "" ,
        "correct": " False",
        "incorrect" : [
           "True",
           "",
           "",
           ""
        ],
       "Explanation" : "The value of the expression (2**2)**3 = 4**3 = 64. When the expression 2**2**3 is evaluated in python, we get the result as 256, because this expression is evaluated as 2**(2**3). This is because the associativity of exponentiation operator (**) is from right to left and not from left to right."
        
    },

    {
      "id":"61",
      "category" : "Bitwise – 1",
      "instruction" : "What will be the output of the following Python code snippet if x=1?" ,
        "expression" : "x<<2" ,
        "correct": "4",
        "incorrect" : [
           "8",
           " 1",
           " 2"
        ],
       "Explanation" : "The binary form of 1 is 0001. The expression x<<2 implies we are performing bitwise left shift on x. This shift yields the value: 0100, which is the binary form of the number 4."
        
    },

    {
      "id":"62",
      "category" : "Bitwise – 1",
      "instruction" : " What will be the output of the following Python expression?" ,
        "expression" : "bin(29)" ,
        "correct": "‘0b11101’",
        "incorrect" : [
           "‘0b10111’",
           " ‘0b11111’",
           "‘0b11011’"
        ],
       "Explanation" : "The binary form of the number 29 is 11101. Hence the output of this expression is ‘0b11101’"
        
    },

    {
      "id":"63",
      "category" : "Bitwise – 1",
      "instruction" : "What will be the value of x in the following Python expression, if the result of that expression is 2?" ,
        "expression" : "x>>2" ,
        "correct": "8",
        "incorrect" : [
           " 4",
           "2",
           " 1"
        ],
       "Explanation" : " When the value of x is equal to 8 (1000), then x>>2 (bitwise right shift) yields the value 0010, which is equal to 2. Hence the value of x is 8."
        
    },

    {
      "id":"64",
      "category" : "Bitwise – 1",
      "instruction" : "What will be the output of the following Python expression?" ,
        "expression" : "int(1011)?" ,
        "correct": "1011",
        "incorrect" : [
           " 11",
           "13",
           "1101"
        ],
       "Explanation" : "The result of the expression shown will be 1011. This is because we have not specified the base in this expression. Hence it automatically takes the base as 10."
        
    },

    {
      "id":"65",
      "category" : "Bitwise – 1",
      "instruction" : "To find the decimal value of 1111, that is 15, we can use the function:" ,
        "expression" : "" ,
        "correct": " int(‘1111’,2)",
        "incorrect" : [
           "int(1111,10)",
           "int(‘1111’,10)",
           "int(1111,2)"
        ],
       "Explanation" : ""
        
    },

    {
      "id":"66",
      "category" : "Bitwise – 1",
      "instruction" : "What will be the output of the following Python expression if x=15 and y=12?" ,
        "expression" : "x & y" ,
        "correct": " 12",
        "incorrect" : [
           " b1101",
           "0b1101",
           "1101"
        ],
       "Explanation" : "The symbol ‘&’ represents bitwise AND. This gives 1 if both the bits are equal to 1, else it gives 0. The binary form of 15 is 1111 and that of 12 is 1100. Hence on performing the bitwise AND operation, we get 1100, which is equal to 12."
        
    },

    {
      "id":"67",
      "category" : "Bitwise – 1",
      "instruction" : " Which of the following expressions results in an error?" ,
        "expression" : "" ,
        "correct": " int(1011,2)",
        "incorrect" : [
           " int(1011)",
           " int(‘1011’,23)",
           "int(‘1011’)"
        ],
       "Explanation" : "The expression int(1011,2) results in an error. Had we written this expression as int(‘1011’,2), then there would not be an error."
        
    },

    {
      "id":"68",
      "category" : "Bitwise – 1",
      "instruction" : "Which of the following represents the bitwise XOR operator?" ,
        "expression" : "" ,
        "correct": "^",
        "incorrect" : [
           " &",
           " |",
           " |"
        ],
       "Explanation" : "The ^ operator represent bitwise XOR operation. &: bitwise AND, | : bitwise OR and ! represents bitwise NOT."
        
    },


    {
      "id":"69",
      "category" : "Bitwise – 1",
      "instruction" : " What is the value of the following Python expression?" ,
        "expression" : "bin(0x8)" ,
        "correct": " ‘0b1000’",
        "incorrect" : [
           "1000",
           " 8",
           " ‘0bx1000’"
        ],
       "Explanation" : "The prefix 0x specifies that the value is hexadecimal in nature. When we convert this hexadecimal value to binary form, we get the result as: ‘0b1000’."
        
    },


    {
      "id":"70",
      "category" : "Bitwise – 1",
      "instruction" : "What will be the output of the following Python expression?" ,
        "expression" : "0x35 | 0x75" ,
        "correct": " 117",
        "incorrect" : [
           "115",
           "116",
           "118"
        ],
       "Explanation" : "The binary value of 0x35 is 110101 and that of 0x75 is 1110101. On OR-ing these two values we get the output as: 1110101, which is equal to 117. Hence the result of the above expression is 117."
        
    },

    {
      "id":"71",
      "category" : "Bitwise – 2",
      "instruction" : "It is not possible for the two’s complement value to be equal to the original value in any case." ,
        "expression" : "" ,
        "correct": " False",
        "incorrect" : [
           "True",
           ""
        ],
       "Explanation" : "n most cases the value of two’s complement is different from the original value. However, there are cases in which the two’s complement value may be equal to the original value. For example, the two’s complement of 10000000 is also equal to 10000000. Hence the statement is false."
        
    },


    {
      "id":"72",
      "category" : "Bitwise – 2",
      "instruction" : "The one’s complement of 110010101 is:" ,
        "expression" : "" ,
        "correct": " 001101010",
        "incorrect" : [
           " 110010101",
           "001101011",
           "110010100"
        ],
       "Explanation" : "The one’s complement of a value is obtained by simply changing all the 1’s to 0’s and all the 0’s to 1’s. Hence the one’s complement of 110010101 is 001101010."
        
    },


    {
      "id":"73",
      "category" : "Bitwise – 2",
      "instruction" : "Bitwise _________ gives 1 if either of the bits is 1 and 0 when both of the bits are 1." ,
        "expression" : "" ,
        "correct": " XOR",
        "incorrect" : [
           "OR",
           " AND",
           " NOT"
        ],
       "Explanation" : " Bitwise XOR gives 1 if either of the bits is 1 and 0 when both of the bits are 1."
        
    },

    {
      "id":"74",
      "category" : "Bitwise – 2",
      "instruction" : "What will be the output of the following Python expression?" ,
        "expression" : "4^12" ,
        "correct": " 8",
        "incorrect" : [
           "2",
           "4",
           "12"
        ],
       "Explanation" : ""
        
    },


    {
      "id":"75",
      "category" : "Bitwise – 2",
      "instruction" : "Any odd number on being AND-ed with ________ always gives 1. Hint: Any even number on being AND-ed with this value always gives 0." ,
        "expression" : "" ,
        "correct": "1",
        "incorrect" : [
           "10",
           " 2",
           "0"
        ],
       "Explanation" : "Any odd number on being AND-ed with 1 always gives 1. Any even number on being AND-ed with this value always gives 0."
        
    },


    {
      "id":"76",
      "category" : "Bitwise – 2",
      "instruction" : "What will be the value of the following Python expression?" ,
        "expression" : " bin(10-2)+bin(12^4)" ,
        "correct": "0b10000b1000",
        "incorrect" : [
           "0b10000",
           " 0b10001000",
           "0b1000b1000"
        ],
       "Explanation" : "The output of bin(10-2) = 0b1000 and that of bin(12^4) is ob1000. Hence the output of the above expression is: 0b10000b1000."
        
    },


    {
      "id":"77",
      "category" : "Bitwise – 2",
      "instruction" : "Which of the following expressions can be used to multiply a given number ‘a’ by 4?" ,
        "expression" : "" ,
        "correct": "a<<2",
        "incorrect" : [
           " a<<4",
           "a>>2",
           " a>>4"
        ],
       "Explanation" : "Let us consider an example wherein a=2. The binary form of 2 is 0010. When we left shift this value by 2, we get 1000, the value of which is 8. Hence if we want to multiply a given number ‘a’ by 4, we can use the expression: a<<2."
        
    },


    {
      "id":"78",
      "category" : "Bitwise – 2",
      "instruction" : "What will be the output of the following Python code if a=10 and b =20?" ,
        "expression" : "a=10 \nb=20  \na=a^b    \nb=a^b \na=a^b  \nprint(a,b)" ,
        "correct": " 20 10",
        "incorrect" : [
           "10 20",
           " 10 10",
           "20 20"
        ],
       "Explanation" : "The code shown above is used to swap the contents of two memory locations using bitwise X0R operator. Hence the output of the code shown above is: 20 10."
        
    },


    {
      "id":"79",
      "category" : "Bitwise – 2",
      "instruction" : "What is the two’s complement of -44?" ,
        "expression" : "" ,
        "correct": "11010100",
        "incorrect" : [
           " 1011011",
           "11101011",
           " 10110011"
        ],
       "Explanation" : "The binary form of -44 is 00101100. The one’s complement of this value is 11010011. On adding one to this we get: 11010100 (two’s complement)."
        
    },


    {
      "id":"80",
      "category" : "Bitwise – 2",
      "instruction" : "What will be the output of the following Python expression?" ,
        "expression" : "~100?" ,
        "correct": " -101",
        "incorrect" : [
           "101",
           "100",
           " -100"
        ],
       "Explanation" : " Suppose we have an expression ~A. This is evaluated as: -A – 1. Therefore, the expression ~100 is evaluated as -100 – 1, which is equal to -101."
        
    },


    {
      "id":"81",
      "category" : "Boolean",
      "instruction" : " What will be the output of the following Python code snippet?" ,
        "expression" : "bool(‘False’)  bool()" ,
        "correct": " True False",
        "incorrect" : [
           " False  False",
           " False True",
           " True  True",
           ""
        ],
       "Explanation" : "The Boolean function returns true if the argument passed to the bool function does not amount to zero. In the first example, the string ‘False’ is passed to the function bool. This does not amount to zero and hence the output is true. In the second function, an empty list is passed to the function bool. Hence the output is false."
        
    },


    {
      "id":"82",
      "category" : "Boolean",
      "instruction" : "What will be the output of the following Python code snippet?" ,
        "expression" : "['hello', 'morning'][bool('')]" ,
        "correct": " hello",
        "incorrect" : [
           " error",
           " no output",
           "morning"
        ],
       "Explanation" : " The line of code shown above can be simplified to state that ‘hello’ should be printed if the argument passed to the Boolean function amounts to zero, else ‘morning’ will be printed."
        
    },


    {
      "id":"83",
      "category" : "Boolean",
      "instruction" : " What will be the output of the following Python code snippet?" ,
        "expression" : "not(3>4)  not(1&1)" ,
        "correct": "True False",
        "incorrect" : [
           "True True",
           "False True",
           "False False",
           ""
        ],
       "Explanation" : " The function not returns true if the argument amounts to false, and false if the argument amounts to true. Hence the first function returns false, and the second function returns false."
        
    },

    {
      "id":"84",
      "category" : "Boolean",
      "instruction" : " What will be the output of the following Python code?" ,
        "expression" : "['f', 't'][bool('spam')]" ,
        "correct": " t",
        "incorrect" : [
           " f",
           "No output",
           " Error"
        ],
       "Explanation" : "The line of code can be translated to state that ‘f’ is printed if the argument passed to the Boolean function amount to zero. Else ‘t’ is printed. The argument given to the Boolean function in the above case is ‘spam’, which does not amount to zero. Hence the output is t."
        
    },


    {
      "id":"85",
      "category" : "Boolean",
      "instruction" : "What will be the output of the following Python code?" ,
        "expression" : "l=[1, 0, 2, 0, 'hello', '', []]  list(filter(bool, l))" ,
        "correct": " [1, 2, ‘hello’]",
        "incorrect" : [
           "Error",
           "[1, 0, 2, ‘hello’, ”, []]",
           "[1, 0, 2, 0, ‘hello’, ”, []]"
        ],
       "Explanation" : "The code shown above returns a new list containing only those elements of the list l which do not amount to zero. Hence the output is: [1, 2, ‘hello’]."
        
    },

    {
      "id":"86",
      "category" : "Boolean",
      "instruction" : "What will be the output of the following Python code if the system date is 21st June, 2017 (Wednesday)?" ,
        "expression" : "[] or {}  {} or []" ,
        "correct": "   {}  []",
        "incorrect" : [
           "[]  {}",
           "[] []",
           "{} {}",
           ""
        ],
       "Explanation" : " The code shown above shows two functions. In both the cases the right operand is returned. This is because each function is evaluated from left to right. Since the left operand is false, it is assumed that the right operand must be true and hence the right operand is returned in each of the above case."
        
    },

    {
      "id":"87",
      "category" : "Boolean",
      "instruction" : "What will be the output of the following Python code?" ,
        "expression" : "class Truth: pass x=Truth() bool(x)" ,
        "correct": " true",
        "incorrect" : [
           "pass",
           " false",
           " false"
        ],
       "Explanation" : "If the truth method is not defined, the object is considered true. Hence the output of the code shown above is true."
        
    },

    {
      "id":"88",
      "category" : "Boolean",
      "instruction" : " What will be the output of the following Python code?" ,
        "expression" : "if (9 < 0) and (0 < -9)  print(\"hello\") elif (9 > 0) or False:  print(\"good\")  else: print(\"bad\")" ,
        "correct": "good",
        "incorrect" : [
           "error",
           "hello",
           " bad"
        ],
       "Explanation" : " The code shown above prints the appropriate option depending on the conditions given. The condition which matches is (9>0), and hence the output is: good."
        
    },

    {
      "id":"89",
      "category" : "Boolean",
      "instruction" : "Which of the following Boolean expressions is not logically equivalent to the other three?" ,
        "expression" : "" ,
        "correct": "not(-6>10 or-6==10)",
        "incorrect" : [
           " not(-6<0 or-6>10",
           "-6>=0 and -6<=10",
           "not(-6<10 or-6==10)"
        ],
       "Explanation" : "The expression not(-6<0 or -6>10) returns the output False. \nThe expression -6>=0 and -6<=10 returns the output False. \nThe expression not(-6<10 or -6==10) returns the output False. \nThe expression not(-6>10 or -6==10) returns the output True."
        
    },

    {
      "id":"90",
      "category" : "Boolean",
      "instruction" : "What will be the output of the following Python code snippet?" ,
        "expression" : "not(10<20) and not(10>30)" ,
        "correct": " False",
        "incorrect" : [
           "True",
           "Error",
           "No output"
        ],
       "Explanation" : "The expression not(10<20) returns false. The expression not(10>30) returns true. The and operation between false and true returns false. Hence the output is false."
        
    },

    {
      "id":"91",
      "category" : "Formatting – 1",
      "instruction" : "What will be the output of the following Python code snippet?" ,
        "expression" : "X=”hi”  print(“05d”%X)" ,
        "correct": "error",
        "incorrect" : [
           "00000hi",
           "0000hi",
           "hi000",
           ""
        ],
       "Explanation" : "The code snippet shown above results in an error because the above formatting option works only if ‘X’ is a number. Since in the above case ‘X’ is a string, an error is thrown."
        
    },

    {
      "id":"92",
      "category" : "Formatting – 1",
      "instruction" : " What will be the output of the following Python code snippet?" ,
        "expression" : "X=”san-foundry”  print(“%56s”,X)" ,
        "correct": "56 blank spaces before san-foundry",
        "incorrect" : [
           "56 blank spaces before san and foundry",
           "56 blank spaces after san-foundry",
           "no change"
        ],
       "Explanation" : "The formatting option print(“%Ns”,X) helps us add ‘N’ number of spaces before a given string ‘X’. Hence the output for the code snippet shown above will be 56 blank spaces before the string “san-foundry”."
        
    },

    {
      "id":"93",
      "category" : "Formatting – 1",
      "instruction" : "The formatting option print(“%Ns”,X) helps us add ‘N’ number of spaces before a given string ‘X’. Hence the output for the code snippet shown above will be 56 blank spaces before the string “san-foundry”." ,
        "expression" : "print(\"%-06d\"%x)" ,
        "correct": "456",
        "incorrect" : [
           "000456",
           "456000",
           "error"

        ],
       "Explanation" : "The expression shown above results in the output 456."
        
    },

    {
      "id":"94",
      "category" : "Formatting – 1",
      "instruction" : "What will be the output of the following Python expression if X=345?" ,
        "expression" : "print(“%06d”%X)" ,
        "correct": " 000345",
        "incorrect" : [
           " 345000",
           "000000345",
           "345000000"
        ],
       "Explanation" : "The above expression returns the output 000345. It adds the required number of zeroes before the given number in order to make the number of digits 6 (as specified in this case)."
        
    },

    {
      "id":"95",
      "category" : "Formatting – 1",
      "instruction" : "Which of the following formatting options can be used in order to add ‘n’ blank spaces after a given string ‘S’?" ,
        "expression" : "" ,
        "correct": " print(“%-ns”%S)",
        "incorrect" : [
           "print(“%ns”%S)",
           "print(“-ns”%S)",
           " print(“-ns”%S)"
        ],
       "Explanation" : "In order to add ‘n’ blank spaces after a given string ‘S’, we use the formatting option:(“%-ns”%S)."
        
    },

    {
      "id":"96",
      "category" : "Formatting – 1",
      "instruction" : "What will be the output of the following Python expression if X = -122?" ,
        "expression" : "print(\"-%06d\"%x)" ,
        "correct": "–00122",
        "incorrect" : [
           " -000122",
           "000122",
           "-00122"
        ],
       "Explanation" : "The given number is -122. Here the total number of digits (including the negative sign) should be 6 according to the expression. In addition to this, there is a negative sign in the given expression. Hence the output will be – -00122."
        
    },

    {
      "id":"97",
      "category" : "Formatting – 1",
      "instruction" : "What will be the output of the following Python expression if the value of x is 34?" ,
        "expression" : "print(“%f”%x)" ,
        "correct": " 34.000000",
        "incorrect" : [
           " 34.00",
           " 34.0000",
           "34.00000000"
        ],
       "Explanation" : "The expression shown above normally returns the value with 6 decimal points if it is not specified with any number. Hence the output of this expression will be: 34.000000 (6 decimal points)."
        
    },

    {
      "id":"98",
      "category" : "Formatting – 1",
      "instruction" : "What will be the output of the following Python expression if x=56.236?" ,
        "expression" : "print(\"%.2f\"%x)" ,
        "correct": " 56.24",
        "incorrect" : [
           " 56.00",
           "56.23",
           "0056.236"
        ],
       "Explanation" : " The expression shown above rounds off the given number to the number of decimal places specified. Since the expression given specifies rounding off to two decimal places, the output of this expression will be 56.24. Had the value been x=56.234 (last digit being any number less than 5), the output would have been 56.23."
        
    },

    {
      "id":"99",
      "category" : "Formatting – 1",
      "instruction" : "What will be the output of the following Python expression if x=22.19?" ,
        "expression" : "print(\"%5.2f\"%x)" ,
        "correct": "22.19",
        "incorrect" : [
           "22.1900",
           "22.00000",
           "22.20"
        ],
       "Explanation" : "The output of the expression above will be 22.19. This expression specifies that the total number of digits (including the decimal point) should be 5, rounded off to two decimal places."
        
    },

    {
      "id":"100",
      "category" : "Formatting – 1",
      "instruction" : "The expression shown below results in an error." ,
        "expression" : "print(\"-%5d0\",989)" ,
        "correct": " False",
        "incorrect" : [
           "True"
        ],
       "Explanation" : " The expression shown above does not result in an error. The output of this expression is -%5d0 989. Hence this statement is incorrect."
        
    },

    {
      "id":"101",
      "category" : "",
      "instruction" : "" ,
        "expression" : "" ,
        "correct": "",
        "incorrect" : [
           "",
           "",
           "",
           ""
        ],
       "Explanation" : ""
        
    },

    {
      "id":"",
      "category" : "",
      "instruction" : "" ,
        "expression" : "" ,
        "correct": "",
        "incorrect" : [
           "",
           "",
           "",
           ""
        ],
       "Explanation" : ""
        
    },

    {
        "category" : "String - 8",
        "instruction" : "What will be the output of the following Python code?" ,
        "expression" : "print(\"Hello {name1} and {name2}\".format(name1='foo', name2='bin'))",
        "correct": " Hello foo and bin",
        "incorrect" : [
            "Hello {name1} and {name2}",
            "Error",
            "Hello and"
        ],
        "Explanation" : "The arguments are accessed by their names."
        
    }
]